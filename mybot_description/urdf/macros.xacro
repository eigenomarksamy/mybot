<?xml version="1.0"?>
<robot name="mybot" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <macro name="cylinder_inertia" params="m r h">
  <inertia  ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0"
    iyy="${m*(3*r*r+h*h)/12}" iyz = "0"
    izz="${m*r*r/2}"
  />
</macro>

<macro name="box_inertia" params="m x y z">
  <inertia  ixx="${m*(y*y+z*z)/12}" ixy = "0" ixz = "0"
    iyy="${m*(x*x+z*z)/12}" iyz = "0"
    izz="${m*(x*x+z*z)/12}"
  />
</macro>

<macro name="sphere_inertia" params="m r">
  <inertia  ixx="${2*m*r*r/5}" ixy = "0" ixz = "0"
    iyy="${2*m*r*r/5}" iyz = "0"
    izz="${2*m*r*r/5}"
  />
</macro>
<macro name="wheel" params="lr tY">

<link name="${lr}_wheel">
  <collision>
    <origin xyz="0 0 0" rpy="0 ${PI/2} ${PI/2}" />
    <geometry>
      <cylinder length="${wheelWidth}" radius="${wheelRadius}"/>
    </geometry>
  </collision>

  <visual>
    <origin xyz="0 0 0" rpy="0 ${PI/2} ${PI/2}" />
    <geometry>
      <cylinder length="${wheelWidth}" radius="${wheelRadius}"/>
    </geometry>
    <material name="black"/>
  </visual>

  <inertial>
    <origin xyz="0 0 0" rpy="0 ${PI/2} ${PI/2}" />
    <mass value="${wheelMass}"/>
    <cylinder_inertia m="${wheelMass}" r="${wheelRadius}" h="${wheelWidth}"/>
  </inertial>
</link>

<gazebo reference="${lr}_wheel">
  <mu1 value="1.0"/>
  <mu2 value="1.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <fdir1 value="1 0 0"/>
  <material>Gazebo/Black</material>
</gazebo>


<joint name="${lr}_wheel_hinge" type="continuous">
  <parent link="chassis"/>
  <child link="${lr}_wheel"/>
<origin xyz="${-wheelPos+chassisLength/2} ${tY*wheelWidth/2+tY*chassisWidth/2} ${wheelRadius}" rpy="0 0 0" />
  <axis xyz="0 1 0" rpy="0 0 0" />
  <limit effort="100" velocity="100"/>
  <joint_properties damping="0.0" friction="0.0"/>
</joint>


<transmission name="${lr}_trans">
  <type>transmission_interface/SimpleTransmission</type>
  <joint name="${lr}_wheel_hinge">
    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
  </joint>
  <actuator name="${lr}Motor">
    <hardwareInterface>EffortJointInterface</hardwareInterface>
    <mechanicalReduction>10</mechanicalReduction>
  </actuator>
</transmission>

</macro>
<!--  <xacro:macro name="imu_sensor" params="imu_name imu_topic update_rate rate_mean rate_stddev
    rate_bias_mean rate_bias_stddev accel_mean accel_stddev accel_bias_mean accel_bias_stddev">
    <gazebo>
      <plugin name="${imu_name}_controller" filename="libgazebo_ros_imu.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>${update_rate}</updateRate>
        <bodyName>${imu_name}</bodyName>
        <topicName>${imu_topic}</topicName>
        <gaussianNoise>${rate_stddev*rate_stddev}</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <serviceName>/${imu_name}_imu</serviceName>
      </plugin> 
    </gazebo>-->
    
    <!-- Imu definition required for DLS hardware interface of ros control -->
    <!--<gazebo reference="${imu_name}">
      <sensor name="${imu_name}" type="imu">
        <always_on>1</always_on>
        <update_rate>${update_rate}</update_rate>
        <imu>
          <noise>
            <type>gaussian</type>
            <rate>
              <mean>${rate_mean}</mean>
              <stddev>${rate_stddev}</stddev>
              <bias_mean>${rate_bias_mean}</bias_mean>
              <bias_stddev>${rate_bias_stddev}</bias_stddev>
            </rate>
            <accel>
              <mean>${accel_mean}</mean>
              <stddev>${accel_stddev}</stddev>
              <bias_mean>${accel_bias_mean}</bias_mean>
              <bias_stddev>${accel_bias_stddev}</bias_stddev>
            </accel>
          </noise>
        </imu>
      </sensor>
    </gazebo>
</xacro:macro>-->

  <!-- Macro to add an IMU. -->
  <!--<xacro:macro name="imu_plugin_macro"
    params="namespace imu_suffix parent_link imu_topic
      mass_imu_sensor gyroscope_noise_density gyroscopoe_random_walk
      gyroscope_bias_correlation_time gyroscope_turn_on_bias_sigma
      accelerometer_noise_density accelerometer_random_walk
      accelerometer_bias_correlation_time accelerometer_turn_on_bias_sigma
      *inertia *origin">
    --><!-- IMU link -->
    <!--<link name="${namespace}/imu${imu_suffix}_link">
      <inertial>
        <xacro:insert_block name="inertia" />
        <mass value="${mass_imu_sensor}" />  --><!-- [kg] -->
    <!--    <origin xyz="0 0 0" rpy="0 0 0" />
      </inertial>
    </link>-->
    <!-- IMU joint -->
    <!--<joint name="${namespace}/imu${imu_suffix}_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/imu${imu_suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    <gazebo>
      <plugin filename="libgazebo_imu_plugin.so" name="imu${imu_suffix}_plugin">-->
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
        <!--<robotNamespace>${namespace}</robotNamespace> --><!-- (string, required): ros namespace in which the messages are published -->
        <!--<linkName>${namespace}/imu${imu_suffix}_link</linkName> --><!-- (string, required): name of the body which holds the IMU sensor -->
        <!--<imuTopic>${imu_topic}</imuTopic> --><!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
        <!--<gyroscopeNoiseDensity>${gyroscope_noise_density}</gyroscopeNoiseDensity> --><!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
        <!--<gyroscopeRandomWalk>${gyroscopoe_random_walk}</gyroscopeRandomWalk>--> <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
        <!--<gyroscopeBiasCorrelationTime>${gyroscope_bias_correlation_time}</gyroscopeBiasCorrelationTime> --><!-- Gyroscope bias correlation time constant [s] -->
        <!--<gyroscopeTurnOnBiasSigma>${gyroscope_turn_on_bias_sigma}</gyroscopeTurnOnBiasSigma> --><!-- Gyroscope turn on bias standard deviation [rad/s] -->
        <!--<accelerometerNoiseDensity>${accelerometer_noise_density}</accelerometerNoiseDensity> --><!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
        <!--<accelerometerRandomWalk>${accelerometer_random_walk}</accelerometerRandomWalk> --><!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
        <!--<accelerometerBiasCorrelationTime>${accelerometer_bias_correlation_time}</accelerometerBiasCorrelationTime> --> <!-- Accelerometer bias correlation time constant [s] -->
        <!--<accelerometerTurnOnBiasSigma>${accelerometer_turn_on_bias_sigma}</accelerometerTurnOnBiasSigma> --><!-- Accelerometer turn on bias standard deviation [m/s^2] -->
      <!--</plugin>
    </gazebo>-->
<!--</xacro:macro>-->

</robot>
